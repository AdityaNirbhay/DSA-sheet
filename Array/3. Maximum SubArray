Problem Link: https://leetcode.com/problems/maximum-subarray/


//This is Kadane's Algorithm with O(N) time complexity
//Can be optimised using DP or Divide and Conquer


int maxSubArray(vector<int>& nums) {
        
        int current_sum = 0;
        int largest_sum = 0;
        
        for(int i=0;i<nums.size();i++){
            current_sum += nums[i];
            
            if(current_sum < 0){
                current_sum = 0;
            }
            largest_sum = max(current_sum,largest_sum);
        }
        
        int max = INT_MIN;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>max){
                max = nums[i];
            }
        }
        
        if(largest_sum==0){
            return max;
        }
        else
            return largest_sum;
    }
